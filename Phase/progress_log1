## Instructions pour les Développeurs

1.  **Copier la Structure :** Copiez l'un des blocs `[ ] **Tâche Principale :** ...` ci-dessous.
2.  **Remplir les Détails :** Remplacez "Tâche Principale", "Sous-tâche 1", etc., par les descriptions réelles des tâches sur lesquelles vous travaillez. Adaptez les critères.
3.  **Suivi Local :** Cochez les cases (`[x]`) et ajoutez des notes sous les points si vous utilisez ce fichier pour votre suivi personnel.
4.  **Statut Officiel :** Informez l'IA/responsable lorsque les tâches réelles sont prêtes pour revue.

---

## Instructions pour la gestion de cette liste

*   **Marquage des tâches terminées :** Une tâche ne sera marquée comme terminée (`✅` ou `[x]`) que lorsque sa réalisation aura été **confirmée** par l'analyse du code, une démo, ou une vérification explicite. *(PEPITO: J'utilise `[x]` pour les tâches validées par l'IA/analyse et `[ ]` pour les autres)*
*   **Vérification avant de marquer comme terminée :**
    *   La méthode privilégiée pour vérifier est l'**analyse du code source pertinent** ou la **visualisation directe sur l'environnement de développement/staging**.
    *   Si l'analyse ou la visualisation n'est pas suffisante, je **demanderai explicitement confirmation** avant de marquer la tâche comme terminée.
    *   Je **n'assumerai pas** qu'une tâche est terminée.
*   **Mise à jour de la liste :**
    *   Les descriptions des tâches pourront être mises à jour pour ajouter du contexte ou des étapes si nécessaire.
*   **Ajout des Tâches Hors Scope Réalisées :**
    *   **Si des tâches significatives non prévues initialement (ex: refactorings majeurs, ajout de fonctionnalités intermédiaires nécessaires) sont réalisées, je les ajouterai explicitement à la liste, marquées comme complétées ([x]), sous une section pertinente ou une nouvelle section dédiée (ex: "Refonte Technique"). L'objectif est de documenter tout le travail effectué pour maintenir un contexte précis.*



# To-Do List pour Finalisation MVP 1.9 (Environnement de Développement)

## 1. Finalisation Technique & Configuration de l'Environnement de Développement Complet
- [ ] **Instance Supabase (Développement/Staging) :**
    - [xvasy] Instance propre et configurée.
    - [x] Schéma SQL final et corrigé (`supabase_schema.sql` avec ENUM `project_type_enum` OK) appliqué.
- [x] **Configuration des Variables d'Environnement (Développement) :**
    - [x] Variables frontend (`.env` / `public/index.html`) pointent vers Supabase dev.
    - [x] Variables backend (`.env`) pointent vers Supabase dev.
- [ ] **Application Fonctionnelle Localement/Staging :**
    - [x] Frontend démarre et fonctionne.
    - [x] Backend démarre et fonctionne.
    - [x] Frontend et backend communiquent correctement.

## 1.bis. Développement Fonctionnalités Manquantes (pour alignement MVP1.9)
- [x] **Développement Export PDF pour PRD (Feature 10.1) :**
    - [x] Démarrage du développement.
    - [x] **Définir l'approche :** Génération PDF côté client avec html2pdf.js (changement d'approche suite à des problèmes de dépendances natives).
    - [x] **Backend (FastAPI) :**
        - [x] Créer un endpoint `/api/v1/prd/export/pdf` acceptant du HTML.
        - [x] Remplacé par une solution client-side.
        - [x] Renvoyer le fichier PDF.
    - [x] **Frontend :**
        - [x] Ajouter un bouton "Exporter en PDF" dans l'interface du PRD.
        - [x] Au clic, récupérer le contenu HTML du PRD.
        - [x] Utiliser html2pdf.js pour générer directement le PDF dans le navigateur.
        - [x] Gérer la réponse du backend et déclencher le téléchargement du PDF.
    - [x] Tests initiaux de la fonctionnalité.
- [x] **Développement Templates de PRD (Feature 12.2) :**
    - [x] Démarrage du développement.
    - [x] Définir la structure des 2-3 templates PRD basiques (ex: SaaS, Mobile).
    - [x] Implémenter l'UI dans PRDEditor pour sélectionner un template à la création/initialisation.
    - [x] Implémenter la logique pour charger le contenu du template dans l'éditeur.
- [x] **Développement Backend pour Chatbot AI CodeGuide (Feature 12.1.2) :**
    - [x] Démarrage du développement.
    - [x] Créer l'endpoint FastAPI dans `server.py` (ou module `external_integrations/`).
    - [x] Cet endpoint reçoit la question utilisateur du frontend.
    - [x] Intégrer l'appel à l'API LLM (Gemini/Claude) depuis cet endpoint.
    - [x] Gérer les clés API LLM de manière sécurisée (variables d'environnement backend).
    - [x] Retourner la réponse du LLM au frontend.
- [x] **Intégration Frontend pour Chatbot AI CodeGuide (Feature 12.1.1) :**
    - [x] S'assurer/Implémenter une interface de chat simple dans `PRDEditor.js`.
    - [x] L'interface de chat appelle le nouvel endpoint backend.
    - [x] Afficher la réponse du LLM dans l'interface de chat.
- [x] **Intégration IA Contextuelle dans l'éditeur PRD (Feature 12.1.3) :**
    - [x] Création du composant `ContextualIAButton.js` pour les actions IA par section.
    - [x] Création du composant `SectionEditor.js` qui intègre le bouton IA.
    - [x] Intégration dans `PRDEditor.js` pour remplacer les zones de texte standard.
    - [x] Création du module backend `ai_section_assistant.py` pour les prompts contextuels.
    - [x] Ajout de l'endpoint `/section-assist` dans le backend.
    - [x] Mise à jour de l'API frontend pour communiquer avec cet endpoint.
    - [x] **Résolution des problèmes d'appel à l'API Claude (bibliothèque, nom de modèle, client asynchrone). Chatbot fonctionnel avec Claude.**
- [ ] **Développement Sauvegarde Blueprint (Feature 11.3) :**
    - [ ] **Création `blueprintsAPI` dans `frontend/src/api.js` :**
        - [x] Définir une fonction `saveBlueprint(blueprintData)`.
        - [x] Cette fonction insère les données dans la table `blueprints` de Supabase.
        - [x] Exporter `blueprintsAPI` dans l'objet par défaut.
        - [x] Définir une fonction `getBlueprintForProject(projectId)`.
    - [ ] **Modification `BlueprintGenerator.js` pour sauvegarder :**
        - [x] Importer `supabase` et `blueprintsAPI`.
        - [x] Ajouter des états pour `savingBlueprint` et `saveError`.
        - [x] Créer une fonction `handleSaveAndFinish` (ou similaire).
        - [x] Dans cette fonction : récupérer l'ID utilisateur, préparer le payload (réponses + recommandations).
        - [x] Appeler `blueprintsAPI.saveBlueprint()`.
        - [x] Gérer le succès (ex: notification, navigation) et les erreurs.
        - [x] Lier cette fonction au bouton "Terminer" (ou un nouveau bouton "Sauvegarder").
    - [ ] **Modification `ProjectDetails.js` pour afficher Blueprint :**
        - [x] Importer `blueprintsAPI`.
        - [x] Ajouter un état `blueprint`.
        - [x] Appeler `getBlueprintForProject` dans `useEffect`.
        - [x] Mettre à jour JSX pour afficher les données (initialement JSON, puis formaté).
- [x] **Développement Sauvegarde & Affichage Vision Validator (Feature 13) :**
    - [x] **Création `visionValidationsAPI` dans `frontend/src/api.js` :**
        - [x] Définir une fonction `saveValidationResult(validationData)`.
        - [x] Cette fonction insère les données dans la table `vision_validations`.
        - [x] Définir une fonction `getLatestValidationForProject(projectId)`.
        - [x] Exporter `visionValidationsAPI` dans l'objet par défaut.
    - [x] **Modification `VisionValidator.js` pour sauvegarder les résultats :**
        - [x] Importer `supabase` et `visionValidationsAPI`.
        - [x] Dans la fonction `validateVision` (ou `handleValidateAndSave`) après le calcul des `results`:
            - [x] Récupérer l'ID utilisateur.
            - [x] Préparer le payload avec `project_id`, `user_id`, `score`, `feedback`.
            - [x] Appeler `visionValidationsAPI.saveValidationResult()`.
            - [x] Gérer l'état de sauvegarde (loading, success, error) et les retours UI.
    - [x] **Modification `ProjectDetails.js` pour afficher les résultats de la dernière validation :**
        - [x] Importer `visionValidationsAPI`.
        - [x] Ajouter un état `validationResult`.
        - [x] Dans `useEffect`, appeler `visionValidationsAPI.getLatestValidationForProject(projectId)`.
        - [x] Mettre à jour le JSX pour afficher le score et le feedback si une validation existe.

## 2. Stabilisation et Tests Approfondis (sur l'environnement de développement)
- [ ] **Tests E2E :**
    - [ ] Flux d'inscription utilisateur.
    - [ ] Flux de connexion utilisateur.
    - [ ] Flux de création de projet.
    - [ ] Flux d'édition de projet (si applicable).
    - [ ] Flux de sauvegarde de PRD.
    - [ ] Flux d'export de PRD (Markdown).
    - [ ] Flux d'export de PRD (PDF).
    - [ ] Utilisation des templates de PRD.
    - [ ] Interaction basique avec le Chatbot AI CodeGuide (MVP1.6).
    - [ ] Parcours complet du Blueprint Generator (incluant la sauvegarde et l'affichage du blueprint).
    - [ ] Parcours complet du Vision Validator (incluant la génération, la sauvegarde, et l'affichage des résultats).
- [ ] **Correction des Bugs :**
    - [ ] Identifier et lister les bugs fonctionnels et d'intégration.
    - [ ] Prioriser les bugs.
    - [ ] Corriger les bugs bloquants et majeurs.
- [ ] **Tests de Non-Régression :**
    - [ ] Vérifier que les corrections n'ont pas introduit de nouveaux problèmes.
- [ ] **Revue des Performances (de base) :**
    - [ ] Identifier et noter les latences ou problèmes de performance évidents.

## 3. Finalisation UX/UI (pour la version de développement)
- [ ] **Revue UX Writing :**
    - [ ] Vérifier tous les textes de l'interface (boutons, labels, messages d'erreur, placeholders).
- [ ] **Tests d'Utilisabilité Informels :**
    - [ ] Organiser des tests avec des membres de l'équipe ou testeurs "amis".
    - [ ] Recueillir et documenter les retours.
- [ ] **Ajustements UI :**
    - [ ] Assurer la cohérence visuelle.
    - [ ] Corriger les problèmes d'affichage identifiés.

## 4. Vérification de la Couverture Fonctionnelle (selon `features.md` et `user-story.md`)
- [ ] **Revue `features.md` (MVP0 à MVP1.9) :**
    - [ ] Confirmer l'implémentation de chaque fonctionnalité listée (après développement des points en section 1.bis).
- [ ] **Revue `user-story.md` (MVP1.1 à MVP1.9) :**
    - [ ] Confirmer que chaque User Story principale est implémentée et testable (après développement des points en section 1.bis).
- [ ] **Fonctionnalités Spécifiques à vérifier :**
    - [ ] **Onboarding Utilisateur simple (MVP1.8 - US1.8.1) :** Le wizard est-il présent et fonctionnel ?
    - [ ] **Collecte de Feedback (MVP1.8 - US1.8.2) :** Le lien/mécanisme est-il en place et fonctionnel ?
    - [ ] **Préparation Vibe Coders (MVP1.5 - Admin) :**
        - [ ] Processus de candidature externe défini et testable (ex: formulaire Typeform prêt).
        - [ ] Structure du Bootcamp V0 documentée.

## 5. Préparation pour la Suite (Perspective de Développement)
- [ ] **Documentation Technique Interne :**
    - [ ] `README.md` racine à jour (instructions build/lancement dev).
    - [ ] `frontend/README.md` à jour (si applicable).
    - [ ] `backend/README.md` à jour (si applicable).
- [ ] **Nettoyage du Code (optionnel) :**
    - [ ] Supprimer les `console.log` excessifs et autre code de débogage temporaire.
- [ ] **Analytics (Simulation/Test en dev) :**
    - [ ] Vérifier que les pseudo-événements analytiques (ou `console.log` simulant) se déclenchent comme prévu.

- [ ] **Nouvelle Feature : Suivi de Développement Détaillé par Phases (pour projets clients)**
    - [ ] **Démarrage de la conception et spécification.**
    - [ ] **Modélisation des Données :**
        - [ ] Définir la table `project_phases` (id, project_id, name, description, objectives, start_date, end_date_target, status, order).
        - [ ] Définir la table `project_milestones` (id, project_phase_id, name, description, target_date, status, order).
        - [ ] Définir la table `developer_work_sessions` (id, project_phase_id, user_id_developer, session_date, duration_hours, description, screenshots_urls, milestone_id (optionnel), linked_task_ids (optionnel)).
    - [ ] **Développement Backend :**
        - [ ] API pour CRUD des `project_phases`.
        - [ ] API pour CRUD des `project_milestones` (liés aux phases).
        - [ ] API pour CRUD des `developer_work_sessions` (incluant l'upload de screenshots et le lien optionnel au milestone).
    - [ ] **Développement Frontend (pour Gestionnaire de Projet / Vous en tant que PM) :**
        - [ ] Interface pour créer et gérer les phases d'un projet.
        - [ ] Dans chaque phase, interface pour créer et gérer les milestones (objectifs, dates, statut).
        - [ ] Vue d'ensemble des phases et de leurs milestones pour un projet.
    - [ ] **Développement Frontend (pour Développeur / Vous en tant que Dev) :**
        - [ ] Interface pour sélectionner une phase active.
        - [ ] Interface pour enregistrer une session de travail (durée, description, screenshots), avec sélection optionnelle d'un milestone de la phase active.
        - [ ] Vue de ses propres sessions de travail.
    - [ ] **Développement Frontend (pour Client / Fondateur du Projet) :**
        - [ ] Vue d'ensemble des phases du projet et des milestones de chaque phase (avec leur statut).
        - [ ] Vue détaillée d'une phase montrant les milestones et les sessions de travail associées (description, screenshots, durée).
        - [ ] (Optionnel) Système de validation/feedback client par milestone ou par phase.
    - [ ] **Tests et Itérations.**
